/*%NOCOMMENT rexx ******************************************************
*                                                                      *
* Program: QWIK - QWIKSCAN Maximised PDS Scanner                       *
*                                                                      *
* Syntax: TSO QWIK                                                     *
*                                                                      *
* Function: Scan a PDS for a string in foreground quickly and with     *
*           various options available                                  *
*                                                                      *
* Calls: Program QWIKSCAN                                              *
*                                                                      *
* Called:                                                              *
*                                                                      *
* Notes: Make sure you have the correct ISPF panel and message         *
*        libraries specified and a LOAD library                        *
*                                                                      *
*        Sorry...no warranty but questions or inquiries can be         *
*        directed to: sebastianÂ§welton.de                              *
*                     www.welton.de                                    *
*                                                                      *
* Created: OPSUPP on 09/05/02                                          *
*                                                                      *
************************************************************************
* Updates:                                                             *
* 09/05/02 - userid:  add comments here                                *
*                                                                      *
* Version 1.0.0 *******************************************************/
/* ************************************************************ *
 * We always come in here, call our main routines and if all    *
 * goes according to plan we should exit from here              *
 * ************************************************************ */
Signal On Syntax                        /* Syntax Error              */
Signal On Novalue                       /* Novalue error             */
Signal On Halt                          /* Program halted            */
Signal On Error                         /* Program error             */
Call tool_init                          /* System and debug variables*/
Call tool_wrapup                        /* Lets go home|             */

/* ************************************************************ *
 * Main routine, also set up a number of constants and          *
 * variables that will be used during the run (if necessary).   *
 * ************************************************************ */
          /*-------------------------------------------------*
          * Start your tool processing in this section only  *
          *-------------------------------------------------*/
tool_start:
tool_start_adr = Address()
sub_proc = 'TOOL_START'
If proc_trace = 'Y' Then Say exec_name'-'sub_proc': START...'
qwikplib = Userid()||'.USER.PLIB'       /* Change to ISPF panel lib  */
qwikmlib = Userid()||'.USER.MLIB'       /* Change to ISPF msgs lib   */
qwikload = Userid()||'.USER.LOAD'       /* Change to LOAD library    */
Address Ispexec
'LIBDEF ISPLLIB DATASET ID('"'"qwikload"'"') STACK'
'LIBDEF ISPMLIB DATASET ID('"'"qwikmlib"'"') STACK'
'LIBDEF ISPPLIB DATASET ID('"'"qwikplib"'"') STACK'
Address Ispexec 'SELECT PGM(QWIKSCAN)'
p_rc = Rc
If proc_trace = 'Y' Then Say exec_name'-'sub_proc': ENDE. RC='p_rc
Address Value tool_start_adr
Return

/* -------------------------------------------------------------- *
 * This is where we exit our program and perform some cleanup.    *
 * -------------------------------------------------------------- */
tool_wrapup:
tool_wrapup_adr = Address()
sub_proc = 'TOOL_WRAPUP'
If proc_trace = 'Y' Then Say exec_name'-'sub_proc' - START'
Address Ispexec
'LIBDEF ISPLLIB'
'LIBDEF ISPMLIB'
'LIBDEF ISPPLIB'
result = p_rc                           /* Set exit return code      */
If proc_trace = 'Y' Then Say exec_name'-'sub_proc': ENDE. RC='p_rc
Address Value tool_wrapup_adr
Exit result

          /*-------------------------------------------------*
          * Simple, very basic help. If the program is called*
          * with HELP or ? after (( then this sections will  *
          * be called (also used in error conditions)        *
          *-------------------------------------------------*/
tool_help:
tool_help_adr = Address()
Call tool_saystart
/*
See documentation for full details
*/
Call tool_sayend
Address Value tool_help_adr
p_rc = 1
Call tool_wrapup

tool_saystart:
tool_saystart_adr = Address()
say_start = Sigl + 2
Address Value tool_saystart_adr
Return

tool_sayend:
tool_sayend_adr = Address()
say_end = Sigl - 2
Do i_i = say_start To say_end
  Say Sourceline(i_i)
End
Address Value tool_sayend_adr
Return

/* -------------------------------------------------------------- *
 * N O V A L U E Error                                            *
 * -------------------------------------------------------------- */
novalue:
novalue_adr = Address()
sub_proc = 'NOVALUE'
If proc_trace = 'Y' Then Say exec_name'-'sub_proc' - START'
If Words(Sigl) > 1 Then Do
  sigl = Space(sigl,1,'_')
  Call tool_msg '001' 'E' 'S' sigl
End
Else Call tool_msg '001' 'E' 'S' sigl
var = Condition('D')
If Words(var) > 1 Then Do
  var = Space(var,1,'_')
  Call tool_msg '002' 'E' 'S' var
End
Else Call tool_msg '002' 'E' 'S' var
If proc_trace = 'Y' Then Say exec_name'-'sub_proc ': ENDE. RC=' p_rc
Address Value novalue_adr
Return

/* -------------------------------------------------------------- *
 * S Y N T A X Error                                              *
 * -------------------------------------------------------------- */
syntax:
syntax_adr = Address()
sub_proc = 'SYNTAX'
If proc_trace = 'Y' Then Say exec_name'-'sub_proc' - START'
abend_rc = rc
abend_rc = Errortext(abend_rc)
line1 = sigl
line2 = Sourceline(line1)
If Words(line1) > 1 Then Do
  line1 = Space(line1,1,'_')
  Call tool_msg '003' 'E' 'S' line1
End
Else Call tool_msg '003' 'E' 'S' line1
Call tool_msg '004' 'E' 'A' abend_rc
If Words(line2) > 1 Then Do
  line2 = Space(line2,1,'_')
  Call tool_msg '005' 'E' 'S' line2
End
Else Call tool_msg '005' 'E' 'S' line2
If proc_trace = 'Y' Then Say exec_name'-'sub_proc ': ENDE. RC=' p_rc
Address Value syntax_adr
Return

/* -------------------------------------------------------------- *
 * E R R O R Error                                                *
 * -------------------------------------------------------------- */
error:
error_adr = Address()
sub_proc = 'ERROR'
If proc_trace = 'Y' Then Say exec_name'-'sub_proc' - START'
abend_rc = rc
line5 = sigl
line3 = line5||'. RC:' abend_rc
line4 = Sourceline(line5)
If Words(line3) > 1 Then Do
  line3 = Space(line3,1,'_')
  Call tool_msg '006' 'E' 'S' line3
End
Else Do
  Call tool_msg '006' 'E' 'S' line5
End
If Words(line4) > 1 Then Do
  line4 = Space(line4,1,'_')
  Call tool_msg '007' 'E' 'S' line4
  Call tool_msg '008' 'I' 'S'
End
Else Do
  Call tool_msg '007' 'E' 'S' line4
  Call tool_msg '008' 'I' 'S'
End
If proc_trace = 'Y' Then Say exec_name'-'sub_proc ': ENDE. RC=' p_rc
Address Value error_adr
Return

/* -------------------------------------------------------------- *
 * H A L T Error                                                  *
 * -------------------------------------------------------------- */
halt:
halt_adr = Address()
sub_proc = 'HALT'
If proc_trace = 'Y' Then Say exec_name'-'sub_proc' - START'
Call tool_msg '009' 'I' 'S'
If proc_trace = 'Y' Then Say exec_name'-'sub_proc ': ENDE. RC=' p_rc
Address Value halt_adr
Return


          /*-------------------------------------------------*
          * Set all debug and trace options                  *
          *-------------------------------------------------*/
tool_init:
tool_init_adr = Address()
Address Tso
Parse Source sys_id how_invokt exec_name dd_nm te.ds_nm ,
 as_invokt cmd_env addr_spc usr_tokn
rif = Sysvar('sysenv')
If rif = 'FORE' Then rif = 'Y'
Else rif = 'N'
iia = Sysvar('sysispf')
If iia = 'ACTIVE' Then iia = 'Y'
Else iia = 'N'
proc_trace = 'N'                      /* No tracing and no display */
trace_level = 'O'                     /* of procedure statements   */
If proc_trace = 'Y' Then Trace Value trace_level
p_rc = 0                                /* Standard return code      */
msg_prefix = exec_name
Call tool_start
Address Value tool_init_adr
Return

/* -------------------------------------------------------------- *
 *                                                                *
 * -------------------------------------------------------------- */
tool_msg:
tool_msg_adr = Address()
sub_proc = 'TOOL_MSG'
If proc_trace = 'Y' Then Say exec_name'-'sub_proc' - START'
Parse Arg tool_msg_no severity where arg1 arg2 arg3 arg4 arg5
Select
  When tool_msg_no = '001' Then ,
   text = 'NOVALUE for data at:' arg1'.'
  When tool_msg_no = '002' Then ,
   text = 'Variable' arg1 'has no value.'
  When tool_msg_no = '003' Then ,
   text = exec_name 'program has a syntax error at line:' arg1'.'
  When tool_msg_no = '004' Then ,
   text = 'The cause is:' arg1'.'
  When tool_msg_no = '005' Then ,
   text = 'And the code is:' arg1'.'
  When tool_msg_no = '006' Then ,
   text = exec_name 'has an error at line' arg1'.'
  When tool_msg_no = '007' Then ,
   text = 'And the code is:' arg1'.'
  When tool_msg_no = '008' Then ,
   text = 'If RC = 2 and the code is EXECIO then this is not an error.'
  When tool_msg_no = '009' Then ,
   text = exec_name 'has been stopped by operator.'
  Otherwise text = 'No message text for this message.'
End
Select
  When where = 'S' Then Do
    If rif = 'Y' & iia = 'Y' Then Do
      zedlmsg = msg_prefix||tool_msg_no||severity text
      Address Ispexec 'SETMSG MSG(ISRZ001)'
    End
    Else Say msg_prefix||tool_msg_no||severity text
    Return
  End
  When where = 'O' Then Do
    Say msg_prefix||tool_msg_no||severity text
    'SEND' msg_prefix||apk_msg_no||severity text ',BRDCST'
    Return
  End
  Otherwise Do
    Say msg_prefix||tool_msg_no||severity text
    Return
  End
End
If proc_trace = 'Y' Then Say exec_name'-'sub_proc ': ENDE. RC=' p_rc
Address Value tool_msg_adr
Return

